{"version":3,"file":null,"sources":["../src/YktManager.js","../src/index.js"],"sourcesContent":["import mysql from 'mysql';\nimport util from 'util';\n\nclass YktManager {\n  constructor(options) {\n    this.url = options.url;\n    this.connection = mysql.createConnection(this.url);\n    this.connection.connect();\n\n    this.queryDevicesSql = 'select DEVPHYID as deviceId, DEVICENAME as deviceName from t_tmp_shoppos;';\n    this.queryDevicesByShopIdSql = 'select DEVPHYID as deviceId, DEVICENAME as deviceName from t_tmp_shoppos where FSHOPID=\"%s\";';\n    this.queryShopsSql = 'select distinct shopid as shopId, shopname as shopName from t_shop order by shopname;';\n    this.queryShopBillSql = 'select shopname as shopName, accdate as accDate, transcnt as transCnt, dramt as drAmt, cramt as crAmt from t_shop_bill where shopname=(select shopname from t_shop where shopid=\"%s\") and accdate=\"%s\";';\n    this.queryDeviceBillSql = 'select devicename as deviceName, ACCDATE as accDate, TRANSCNT as transCnt, DRAMT as drAmt, CRAMT as crAmt from t_shopdevice_bill where devphyid=\"%s\" and accdate=\"%s\";';\n    this.queryTotalBillSql = 'select count(TRANSCNT) as totalTransCnt, count(DRAMT) as totalDrAmt, count(CRAMT) as totalCrAmt from t_shopdevice_bill;';\n  }\n  getShopBill(shopId, accDate) {\n    return new Promise((resolve, reject) => {\n      const queryShopBillSqlBuild = util.format(this.queryShopBillSql, shopId, accDate);\n      console.info(`getShopBill: Executing ${queryShopBillSqlBuild}`);\n      this.connection.query(queryShopBillSqlBuild, function(err, rows) {\n        if(err) {\n          console.error(`Error executing ${queryShopBillSqlBuild}, with error ${err.stack}`);\n          reject(err);\n        }\n        if(rows.length == 0) {\n          console.warn(`Executing ${queryShopBillSqlBuild} return empty result`);\n          resolve(null);\n        }\n        const shopBill = {\n          shopId: shopId,\n          shopName: rows[0].shopName,\n          accDate: rows[0].accDate,\n          transCnt: rows[0].transCnt,\n          drAmt: rows[0].drAmt,\n          crAmt: rows[0].crAmt\n        };\n        resolve(shopBill);\n      });\n    });\n  }\n  getDeviceBill(deviceId, accDate) {\n    return new Promise((resolve, reject) => {\n      const queryDeviceBillSqlBuild = util.format(this.queryDeviceBillSql, deviceId, accDate);\n      console.info(`getDeviceBill: Executing ${queryDeviceBillSqlBuild}`);\n      this.connection.query(queryDeviceBillSqlBuild, function(err, rows) {\n        if(err) {\n          console.error(`Error executing ${queryDeviceBillSqlBuild}, with error ${err.stack}`);\n          reject(err);\n        }\n        if(rows.length == 0) {\n          console.warn(`Executing ${queryDeviceBillSqlBuild} return empty result`);\n          resolve(null);\n        }\n        const deviceBill = {\n          deviceId: deviceId,\n          deviceName: rows[0].deviceName,\n          accDate: rows[0].accDate,\n          transCnt: rows[0].transCnt,\n          drAmt: rows[0].drAmt,\n          crAmt: rows[0].crAmt\n        };\n        resolve(deviceBill);\n      });\n    });\n  }\n  getTotalBill() {\n\n  }\n  getDevices(shopId) {\n    return new Promise((resolve, reject) => {\n      const querySql = shopId ? util.format(this.queryDevicesByShopIdSql, shopId) : this.queryDevicesSql;\n      console.info(`getDevices: Executing ${querySql}`);\n      this.connection.query(querySql, function(err, rows) {\n        if(err) {\n          console.error(`Error executing ${querySql}, with error ${err.stack}`);\n          reject(err);\n        }\n        const devices = rows.map(row => {\n          return {deviceId: row.deviceId, deviceName: row.deviceName};\n        });\n        resolve(devices);\n      });\n    });\n  }\n  getShops() {\n    return new Promise((resolve, reject) => {\n      console.info(`getShops: Executing ${this.queryShopsSql}`);\n      this.connection.query(this.queryShopsSql, function(err, rows) {\n        if(err) {\n          console.error(`Error executing ${this.queryShopsSql}, with error ${err.stack}`);\n          reject(err);\n        }\n        const shops = rows.map(row => {\n          return {shopId: row.shopId, shopName: row.shopName};\n        });\n        resolve(shops);\n      });\n    });\n  }\n}\n\nexport default YktManager;\n","/**\n * Babel Starter Kit (https://www.kriasoft.com/babel-starter-kit)\n *\n * Copyright Â© 2015-2016 Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nexport YktManager from './YktManager.js';\n"],"names":["YktManager","options","url","connection","mysql","createConnection","connect","queryDevicesSql","queryDevicesByShopIdSql","queryShopsSql","queryShopBillSql","queryDeviceBillSql","queryTotalBillSql","shopId","accDate","resolve","reject","queryShopBillSqlBuild","util","format","info","query","err","rows","error","stack","length","warn","shopBill","shopName","transCnt","drAmt","crAmt","deviceId","queryDeviceBillSqlBuild","deviceBill","deviceName","querySql","devices","map","row","shops"],"mappings":"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"}